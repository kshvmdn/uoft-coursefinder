#!/usr/bin/env node

const coursefinder = require('./../lib/')
const prettyFormat = require('pretty-format')

const argv = process.argv.slice(2)
const help = `
  Usage:
    coursefinder <method> <argument> [--pretty] [--show]

  Arguments:
    method         coursefinder method to call (one of search / inquiry) [must be first]
    argument       term / code to use with function [must be second]
    -h, --help     view this help dialog
    -p, --pretty   pretty print the JSON response
    -s, --show     render a browser window and watch the scraping in action

  Examples:
    coursefinder search CSC
    coursefinder search CSC207 --pretty
    coursefinder inquiry CSC207H1F20169 --show --pretty
`

/**
 * Print a string to the console, use prettyFormat if argv includes (-p|--pretty).
 * @param  {string} str String to print
 */
const print = (str) => console.log(argv.includes('--pretty') || argv.includes('-p') ? prettyFormat(str) : str)

/**
 * Print the error message and exit.
 * @param  {Object} err Error
 */
const handleErr = (err) => {
  print(err.message)
  process.exit(1)
}

if (argv.includes('--help') || argv.includes('-h')) {
  console.log(help)
  process.exit(0)
} else {
  let [func, arg] = argv

  if (!coursefinder.hasOwnProperty(func)) {
    handleErr(new Error(`Unexpected function \`${func}\`. Run \`coursefinder --help\` for help.`))
  }

  if (!arg || ['-p', '--pretty', '-s', '--show'].includes(arg)) {
    handleErr(new Error(`Expected code or term as second argument, got \`${arg}\`.`))
  }

  coursefinder[func](arg).then(res => print(res)).catch(err => handleErr(err))
}
